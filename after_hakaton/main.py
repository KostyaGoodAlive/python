import logging
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram import Bot , Dispatcher, executor,types
from aiogram.dispatcher import FSMContext
import os
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from steps import TrafficLights , Flow
from keyboards import lights_all , read_kb , yellow_kb , green_kb , traffic_off_kb , request1
load_dotenv()


TOKEN=os.getenv('TOKEN')



logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! —è –±–æ—Ç —ñ–∑ –º–∞—à–∏–Ω–∞–º–∏ —Å—Ç–∞–Ω—ñ–≤ . –î–∞–≤–∞–π—Ç–µ –≤–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ!', reply_markup=request1)


@dp.message_handler(text ='–î–∞–≤–∞–π—Ç–µ')
async def name(message: types.Message):
        await Flow.Name.set()
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –§–Ü–û")
        file = open('after_hakaton/registr.txt', 'w')
        file.write(f'{message.text}\n')
@dp.message_handler(text ='–ù—ñ –Ω–µ —Ö–æ—á—É')
async def name(message: types.Message):
     await message.answer('–Ø–∫—â–æ –Ω–µ –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î—Ç–µ—Å—å , —Ç–æ –±–æ—Ç –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏')


@dp.message_handler(content_types='text' , state=Flow.Name) 
async def Email(message: types.Message):
    await Flow.Email.set()
    await message.answer('–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π Email —É —Ñ–æ—Ä–º–∞—Ç—ñ - Uk_rAin65e@gmail.com')
    file = open('after_hakaton/registr.txt', 'a')
    file.write(f'{message.text}\n')
@dp.message_handler(content_types='text' , state=Flow.Email) 
async def pasword(message: types.Message):
    await Flow.pasword.set()
    await message.answer('–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å')
    file = open('after_hakaton/registr.txt', 'a')
    file.write(f'{message.text}\n')
@dp.message_handler(content_types='text' , state=Flow.pasword) 
async def repeat(message: types.Message):
    await Flow.end.set()
    await message.answer('–í–∏ –∑–∞—Ä–∞—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ, –¥—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!')
@dp.message_handler(commands='start', state =Flow.end)
async def start(message: types.Message):
    await message.answer('–í–∏ –≤–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')



# @dp.message_handler(commands='traffic_light_on', state='*')
# async def traffic_light_on(message: types.Message):
#     await TrafficLights.stateOn.set()
#     await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä\n'
#                          '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –±—É–¥—å-—è–∫–µ —Å–≤—ñ—Ç–ª–æ:',
#                          reply_markup=lights_all)

# @dp.message_handler(text ='üî¥',state= TrafficLights.stateOn)
# async def traffic_red(message: types.Message):
#     await TrafficLights.stateRed.set()
#     await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ —á–µ—Ä–≤–æ–Ω–µ —Å–≤—ñ—Ç–ª–æüî¥ \n—Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∂–æ–≤—Ç–µ',reply_markup=yellow_kb)

# @dp.message_handler(text ='üü°',state= TrafficLights.stateRed)
# async def traffic_red(message: types.Message):
#     await TrafficLights.stateYellow.set()
#     await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ –∂–æ–≤—Ç–µ —Å–≤—ñ—Ç–ª–æüü° \n—Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–µ–ª–µ–Ω–µ',reply_markup=green_kb)

# @dp.message_handler(text ='üü¢',state= TrafficLights.stateYellow)
# async def traffic_red(message: types.Message):
#     await TrafficLights.stateGreen.set()
#     await message.answer('–í–∏ —É–≤—ñ–º–∫–Ω—É–ª–∏ –∑–µ–ª–µ–Ω–µ —Å–≤—ñ—Ç–ª–æüü¢ \n—Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–æ—Ñ–æ—Ä',reply_markup=traffic_off_kb)

# @dp.message_handler(text ='–ó–∞–≤–µ—Ä—à–∏—Ç–∏',state= TrafficLights.stateGreen)
# async def traffic_red(message: types.Message):
#     await dp.current_state().reset_state()
#     await message.answer('–í–∏ –≤–∏–º–∫–Ω—É–ª–∏ —Å–≤—ñ—Ç–æ—Ñ–æ—Ä\n'
#                          '–©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å - /traffic_light_on')

if __name__ == '__main__':
    executor.start_polling(dp)