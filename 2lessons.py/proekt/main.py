import logging
import asyncio

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import schedule
from threading import Thread
import os
from dotenv import load_dotenv

from parse import anime_news
from parse import anime_getting
from database import Database
load_dotenv()

TOKEN=os.getenv('TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database()
 
# loop = asyncio.get_event_loop() 
# asyncio.set_event_loop(loop)


@dp.message_handler(commands='news')
async def get_anime(message: types.Message):
    news = anime_news()
    if not news:
        await message.answer('‚ùå–ù–µ –º–∞—î –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω:(‚ùå')
    else:
        for new in news:
            title = new['title']
            description = new['description']
            time = new['time']
            msg = (f'üì∞–ù–æ–≤–∏–Ω–∏üì∞:\n\n–ó–∞–≥–∞–ª–æ–º: {title}\n\n–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {description}\n\n{time}')
            await message.answer(text=msg, disable_web_page_preview=True)


@dp.message_handler(commands='start')
async def start_process(message):
    user = await db.check_user(message.from_id)
    if not user:
        await db.register_user(
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_id,
        )
        
        await message.answer('–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!üëç')
    else:
        await message.answer('–í–∏ –≤–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–æ–≤–∞–Ω—ñ!‚úîÔ∏è')    
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ –∞–Ω—ñ–º–µ —è–∫–µ —Ö–æ—á–µ—à –ø–æ–¥–∏–≤–∏—Ç–∏—Å—èüçø')



@dp.message_handler(content_types='text')
async def get_anime(message: types.Message):
    query = message.text.lower().strip()
    animes = anime_getting(query)
    if not animes:
        await message.answer('‚ùå–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ , –∞–±–æ –≤–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç‚ùå')
    else:
        for anime in animes:
            name = anime['name']
            url = anime['url']
            genre = anime['genre']
            description = anime['description']
             
            msg = (f'–ê–Ω—ñ–º–µ: {name}\n–ñ–∞–Ω—Ä: {genre}\n–û–ø–∏—Å: {description}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è:{url}')
            await message.answer(text=msg, disable_web_page_preview=True)



# def notify():
#     send_mess =asyncio.run_coroutine_threadsafe(anime_news(), loop)
#     send_mess.result()


# def run_schedule():
#      schedule.every().day.at('14:45').do(notify)
#      while True:
#         schedule.run_pending()

if __name__ == '__main__':
    executor.start_polling(dp)  